{"version":3,"sources":["components/topnav/TopNav.js","components/util/Cards.js","components/dashboard/Main.js","components/charts/CovidTable.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["TopNav","List","className","ListItem","button","key","component","NavLink","to","ListItemText","primary","useStyles","makeStyles","root","maxWidth","minHeight","title","fontSize","Cards","props","classes","Card","CardContent","Typography","color","gutterBottom","type","Divider","variant","align","style","tcolor","parseFloat","case_count","toLocaleString","theme","flexGrow","Main","useState","allData","setallData","useEffect","a","fetch","json","response","fetchAllRecords","Grid","container","spacing","item","xs","cases","active","deaths","recovered","columns","id","label","format","value","width","maxHeight","CovidTable","apiData","setapiData","rows","fetchAllData","country","critical","todayCases","todayRecovered","todayDeaths","casesPerOneMillion","deathsPerOneMillion","updated","entries","push","addRowData","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","minWidth","TableBody","row","hover","role","tabIndex","Routes","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb3e5d63.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from \"react-router-dom\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nexport default function TopNav() {\n  return (\n    <div >\n        <List className='list-item'>\n          <ListItem button key='Home' component={NavLink} to='/home'>\n              <ListItemText primary='Home' />\n          </ListItem>\n\n          <ListItem button key='CovidTable' component={NavLink} to='/covid-table'>\n            <ListItemText primary='Country Stats' />\n          </ListItem>\n\n          <ListItem button key='contact' component={NavLink} to='/contact'>\n            <ListItemText primary='Contact' />\n          </ListItem>\n        </List>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 300,\n    minHeight: 100\n  },\n  title: {\n    fontSize: 14,\n  },\n});\n\n\nexport default function Cards(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          {props.type}\n        </Typography>\n        <Divider />\n        <br />\n        <Typography variant=\"h3\" component=\"h3\" align=\"right\" style={{color: props.tcolor}}>\n        {parseFloat(props.case_count).toLocaleString('en-US')}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\n","import React, {useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport Cards from '../util/Cards';\nimport { Divider } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Main() {\n  const classes = useStyles();\n  const [allData, setallData] = useState([]);\n\n  useEffect(() => {\n    async function fetchAllRecords() {\n      const response = await (await fetch(\"https://disease.sh/v3/covid-19/all?allowNull=true\")).json();\n      setallData(response)\n    }\n    fetchAllRecords();\n  }, [])\n\n  return (\n    <div className={classes.root}>\n      Covid19 stats here -\n      <Grid container spacing={2}>\n        <Grid item xs>\n          <Cards type=\"Total Cases\" case_count={allData.cases} tcolor=\"#C4C4CA\" />\n        </Grid>\n        <Grid item xs>\n          <Cards type=\"Total Active Cases\" case_count={allData.active} tcolor=\"#F88930\" />\n        </Grid>\n        <Grid item xs>\n          <Cards type=\"Deaths\" case_count={allData.deaths} tcolor=\"#F64444\"/>\n        </Grid>\n        <Grid item xs>\n          <Cards type=\"Total Recovered\" case_count={allData.recovered} tcolor=\"#5DE240\" />\n        </Grid>\n      </Grid>\n      <br /> <Divider /> <br />\n      Charts comes here\n    </div>\n  )\n}\n","import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Typography } from '@material-ui/core';\n\nconst columns = [\n  { id: 'country', label: 'Country'},\n  { id: 'cases', label: 'Total Cases', format: (value) => value.toLocaleString('en-US')},\n  { id: 'todayCases', label: 'Today Cases', format: (value) => value.toLocaleString('en-US')},\n  { id: 'deaths', label: 'Total Deaths', format: (value) => value.toLocaleString('en-US')},\n  { id: 'todayDeaths', label: 'Today Deaths', format: (value) => value.toLocaleString('en-US')},\n  { id: 'recovered', label: 'Recoverd', format: (value) => value.toLocaleString('en-US')},\n  { id: 'todayRecovered', label: 'Today Recovered', format: (value) => value.toLocaleString('en-US')},\n  { id: 'active', label: 'Total Active', format: (value) => value.toLocaleString('en-US')},\n  { id: 'casesPerOneMillion', label: 'Cases/mn', format: (value) => value.toLocaleString('en-US')},\n  { id: 'deathsPerOneMillion', label: 'Deaths/mn', format: (value) => value.toLocaleString('en-US')},\n  { id: 'critical', label: 'Critical', format: (value) => value.toLocaleString('en-US')}\n];\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 700,\n  },\n});\n\nexport default function CovidTable() {\n  const classes = useStyles();\n  const [apiData, setapiData] = useState([]);\n  // const [tableRowData, settableRowData] = useState([]);\n\n  const rows = []\n  function createData(country, cases, recovered, deaths, active, critical, todayCases, todayRecovered, todayDeaths, casesPerOneMillion, deathsPerOneMillion, updated) {\n    return {country, cases, recovered, deaths, active, critical, todayCases, todayRecovered, todayDeaths, casesPerOneMillion, deathsPerOneMillion, updated};\n  }\n\n  function addRowData() {\n    for (const [index, value] of apiData.entries()) {\n      rows.push(createData(value.country, value.cases, value.recovered, value.deaths, value.active, value.critical, value.todayCases, value.todayRecovered, value.todayDeaths, value.casesPerOneMillion, value.deathsPerOneMillion, value.updated))\n      // console.log(\"Pushed data for #\"+index+\" \"+value.country)\n    }\n  }\n\n  useEffect(() => {\n    async function fetchAllData() {\n      const response = await fetch(\"https://disease.sh/v3/covid-19/countries?sort=cases\");\n      const json = await response.json();\n      setapiData(json)\n    }\n    fetchAllData();\n  },[])\n\n  addRowData()\n\n  return (\n    <>\n    <Typography variant=\"h5\" component=\"h5\">Covid-19 updates for each country</Typography>\n    <br />\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.country}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n    </Paper>\n    </>\n  );\n}","import React from 'react'\nimport { Route } from \"react-router-dom\";\nimport { Divider } from '@material-ui/core';\n\nimport TopNav from './topnav/TopNav';\nimport Main from './dashboard/Main';\nimport CovidTable from './charts/CovidTable';\n\nimport './navbar.css';\n\n\nfunction Routes() {\n  return (\n    <div className=\"body\">\n      <div className=\"topnav\">\n       <TopNav />\n      </div>\n      <div className=\"divider\">\n        <br /> <Divider /> <br />\n      </div>\n      <div className=\"main-content\">\n        <Route path=\"/\" component={Main} />\n        <Route path=\"/home\" component={Main} />\n        <Route path=\"/covid-table\" component={CovidTable} />\n      </div>\n    </div>\n  )\n}\n\nexport default Routes\n\n","import React from 'react';\nimport { BrowserRouter} from 'react-router-dom';\n\nimport Routes from './components/Routes'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}