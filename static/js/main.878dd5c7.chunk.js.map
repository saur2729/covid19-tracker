{"version":3,"sources":["components/topnav/TopNav.js","components/util/Cards.js","components/stats/Charts.js","components/dashboard/Main.js","components/stats/CovidTable.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["TopNav","List","className","ListItem","button","key","component","NavLink","to","ListItemText","primary","useStyles","makeStyles","root","maxWidth","minHeight","title","fontSize","Cards","props","classes","Card","CardContent","Typography","color","gutterBottom","type","Divider","variant","align","style","tcolor","parseFloat","case_count","toLocaleString","theme","display","flexWrap","Charts","data","labels","xlabel","datasets","dataset","label","lcolor","push","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Grid","container","spacing","item","xs","Paper","elevation","flexGrow","Main","useState","allData","setallData","chartData","setchartData","useEffect","a","fetch","json","response","fetchAllRecords","chartDetails","currMonth","Date","getMonth","months","slice","casesArr","Array","recoveredArr","deathsArr","reportType","records","fetchMonth","getDate","active","columns","id","format","value","width","maxHeight","CovidTable","apiData","setapiData","rows","createData","country","flag","cases","recovered","deaths","critical","todayCases","todayRecovered","todayDeaths","casesPerOneMillion","deathsPerOneMillion","updated","cntry","concat","console","log","fetchAllData","entries","countryInfo","addRowData","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","minWidth","TableBody","row","hover","role","tabIndex","Routes","exact","path","App","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.878dd5c7.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from \"react-router-dom\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nexport default function TopNav() {\n  return (\n    <div >\n        <List className='list-item'>\n          <ListItem button key='Home' component={NavLink} to='/home'>\n              <ListItemText primary='Home' />\n          </ListItem>\n\n          <ListItem button key='CovidTable' component={NavLink} to='/covid-table'>\n            <ListItemText primary='Country Stats' />\n          </ListItem>\n\n          <ListItem button key='contact' component={NavLink} to='/contact'>\n            <ListItemText primary='Contact' />\n          </ListItem>\n        </List>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 300,\n    minHeight: 100\n  },\n  title: {\n    fontSize: 14,\n  },\n});\n\n\nexport default function Cards(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          {props.type}\n        </Typography>\n        <Divider />\n        <br />\n        <Typography variant=\"h3\" component=\"h3\" align=\"right\" style={{color: props.tcolor}}>\n        {parseFloat(props.case_count).toLocaleString('en-US')}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\n","import { Grid } from '@material-ui/core';\nimport React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n}));\n\nexport default function Charts(props) {\n  const classes = useStyles();\n\n  const data = {\n    labels: props.data.xlabel,\n    datasets: []\n  }\n  for (const dataset in props.data.datasets){\n    const label = props.data.datasets[dataset]['label']\n    const lcolor = props.data.datasets[dataset]['bgcolor']\n    data.datasets.push({\n      label: label,\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: lcolor,\n      borderColor: lcolor,\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: lcolor,\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: lcolor,\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: props.data.datasets[dataset]['data']\n    })\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={2}>\n        <Grid item xs>\n          <Paper elevation={3}>\n            <Line data={data} />\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}","import React, {useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport Cards from '../util/Cards';\nimport Charts from '../stats/Charts';\nimport { Divider } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Main() {\n  const classes = useStyles();\n  const [allData, setallData] = useState([]);\n  const [chartData, setchartData] = useState([]);\n\n  useEffect(() => {\n    async function fetchAllRecords() {\n      const response = await (await fetch(\"https://disease.sh/v3/covid-19/all?allowNull=true\")).json();\n      setallData(response)\n    }\n    fetchAllRecords();\n  }, [])\n\n  // for fetching the chart data\n  const chartDetails = {}\n  const currMonth = new Date().getMonth();\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].slice(0, currMonth+1)\n\n  const casesArr = new Array(currMonth+1).fill(0);\n  const recoveredArr = new Array(currMonth+1).fill(0);\n  const deathsArr = new Array(currMonth+1).fill(0);\n\n  useEffect(() => {\n    async function fetchAllRecords() {\n      const response = await (await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=all\")).json();\n      setchartData(response)\n    }\n    fetchAllRecords();\n  }, [])\n\n  for (var reportType in chartData) {\n    for (const records in chartData[reportType]) {\n      const fetchMonth = new Date(records).getMonth()\n      // get the hghest value for the current month\n      if (fetchMonth === new Date().getMonth()){\n        if (reportType ==='cases' && chartData[reportType][records] > casesArr[fetchMonth]) {\n          casesArr[fetchMonth] = chartData[reportType][records]\n        } else if (reportType ==='deaths' && chartData[reportType][records] > deathsArr[fetchMonth]) {\n          deathsArr[fetchMonth] = chartData[reportType][records]\n        } else if (reportType ==='recovered' && chartData[reportType][records] > recoveredArr[fetchMonth]) {\n          recoveredArr[fetchMonth] = chartData[reportType][records]\n        }\n      }\n      // fetch the records for 28 of each month\n      if (new Date(records).getDate() === 28){\n        if (reportType ==='cases') {\n          casesArr[fetchMonth] = chartData[reportType][records]\n        } else if (reportType ==='deaths') {\n          deathsArr[fetchMonth] = chartData[reportType][records]\n        } else if (reportType ==='recovered') {\n          recoveredArr[fetchMonth] = chartData[reportType][records]\n        }\n      }\n    }\n   }\n\n   chartDetails['xlabel'] =  months\n   chartDetails['datasets'] = []\n   chartDetails['datasets'].push({\n     'label' : 'Total Cases',\n     'bgcolor' : '#C4C4CA',\n     'data' : casesArr\n   })\n   chartDetails['datasets'].push({\n     'label' : 'Total Deaths',\n     'bgcolor' : '#F64444',\n     'data' : deathsArr\n   })\n   chartDetails['datasets'].push({\n     'label' : 'Total Recovered',\n     'bgcolor' : '#5DE240',\n     'data' : recoveredArr\n   })\n\n\n   // fetching the chart data ends here\n\n  return (\n    <div className={classes.root}>\n      <h1>Covid19 Stats</h1>\n      <Grid container spacing={2}>\n        <Grid item xs>\n          <Cards type=\"Total Cases\" case_count={casesArr.slice(-1)[0]} tcolor=\"#C4C4CA\" />\n        </Grid>\n        <Grid item xs>\n          <Cards type=\"Total Active Cases\" case_count={allData.active} tcolor=\"#F88930\" />\n        </Grid>\n        <Grid item xs>\n          <Cards type=\"Deaths\" case_count={deathsArr.slice(-1)[0]} tcolor=\"#F64444\"/>\n        </Grid>\n        <Grid item xs>\n          <Cards type=\"Total Recovered\" case_count={recoveredArr.slice(-1)[0]} tcolor=\"#5DE240\" />\n        </Grid>\n      </Grid>\n      <br /> <Divider />\n      <h2>Distribution of number of cases over time</h2>\n\n      <Grid container spacing={2}>\n        <Grid item xs>\n          <Charts data={chartDetails} />\n        </Grid>\n      </Grid>\n      {/* <Grid container spacing={2}>\n        <Grid item xs>\n          <Charts data={chartDetails} />\n        </Grid>\n        <Grid item xs>\n          <Charts data={chartDetails} />\n        </Grid>\n      </Grid> */}\n      <br />\n\n    </div>\n\n  )\n}\n","import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Typography } from '@material-ui/core';\n\nconst columns = [\n  { id: 'country', label: 'Country'},\n  { id: 'cases', label: 'Total Cases', format: (value) => value.toLocaleString('en-US')},\n  { id: 'todayCases', label: 'Today Cases', format: (value) => value.toLocaleString('en-US')},\n  { id: 'deaths', label: 'Total Deaths', format: (value) => value.toLocaleString('en-US')},\n  { id: 'todayDeaths', label: 'Today Deaths', format: (value) => value.toLocaleString('en-US')},\n  { id: 'recovered', label: 'Recoverd', format: (value) => value.toLocaleString('en-US')},\n  { id: 'todayRecovered', label: 'Today Recovered', format: (value) => value.toLocaleString('en-US')},\n  { id: 'active', label: 'Total Active', format: (value) => value.toLocaleString('en-US')},\n  { id: 'casesPerOneMillion', label: 'Cases/mn', format: (value) => value.toLocaleString('en-US')},\n  { id: 'deathsPerOneMillion', label: 'Deaths/mn', format: (value) => value.toLocaleString('en-US')},\n  { id: 'critical', label: 'Critical', format: (value) => value.toLocaleString('en-US')}\n];\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 700,\n  },\n});\n\nexport default function CovidTable() {\n  const classes = useStyles();\n  const [apiData, setapiData] = useState([]);\n  // const [tableRowData, settableRowData] = useState([]);\n\n  const rows = []\n  function createData(country, flag, cases, recovered, deaths, active, critical, todayCases, todayRecovered, todayDeaths, casesPerOneMillion, deathsPerOneMillion, updated) {\n    var cntry = '<img src=\"'+flag+'\" width=10 height=10/>'\n    cntry = cntry.concat(country);\n    console.log(cntry)\n    return {cntry, cases, recovered, deaths, active, critical, todayCases, todayRecovered, todayDeaths, casesPerOneMillion, deathsPerOneMillion, updated};\n  }\n//value.countryInfo.flag\n  function addRowData() {\n    for (const [index, value] of apiData.entries()) {\n      rows.push(createData(value.country, value.countryInfo.flag, value.cases, value.recovered, value.deaths, value.active, value.critical, value.todayCases, value.todayRecovered, value.todayDeaths, value.casesPerOneMillion, value.deathsPerOneMillion, value.updated))\n      // console.log(\"Pushed data for #\"+index+\" \"+value.country)\n    }\n  }\n\n  useEffect(() => {\n    async function fetchAllData() {\n      const response = await fetch(\"https://disease.sh/v3/covid-19/countries?sort=cases\");\n      const json = await response.json();\n      setapiData(json)\n    }\n    fetchAllData();\n  },[])\n\n  addRowData()\n\n  return (\n    <>\n    <Typography variant=\"h5\" component=\"h5\">Covid-19 updates for each country</Typography>\n    <br />\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.country}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n    </Paper>\n    </>\n  );\n}","import React from 'react'\nimport { Route , Redirect} from \"react-router-dom\";\nimport { Divider } from '@material-ui/core';\n\nimport TopNav from './topnav/TopNav';\nimport Main from './dashboard/Main';\nimport CovidTable from './stats/CovidTable';\n\nimport './navbar.css';\n\n\nfunction Routes() {\n  return (\n    <div className=\"body\">\n      <div className=\"topnav\">\n       <TopNav />\n      </div>\n      <div className=\"divider\">\n        <br /> <Divider />\n      </div>\n      <div className=\"main-content\">\n        <Route exact path=\"/\">\n          <Redirect to=\"/home\" />\n        </Route>\n        <Route path=\"/home\" component={Main} />\n        <Route path=\"/covid-table\" component={CovidTable} />\n      </div>\n    </div>\n  )\n}\n\nexport default Routes\n\n","import React from 'react';\nimport { BrowserRouter} from 'react-router-dom';\n\nimport Routes from './components/Routes'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Routes />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}